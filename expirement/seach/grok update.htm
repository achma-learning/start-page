<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Inspiring Medical Research</title>
  <style>
    /* Reset and global styles */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    body, html {
      height: 100vh;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, #f5f7fa 0%, #e4e9f0 100%);
      color: #1a1a1a;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 2rem;
      overflow: auto;
    }

    /* Main container */
    main {
      display: flex;
      max-width: 1200px;
      width: 100%;
      gap: 3rem;
      align-items: stretch;
    }

    /* Search section */
    .search-section {
      flex: 1;
      display: flex;
      flex-direction: column;
      justify-content: center;
      gap: 2rem;
      max-width: 600px;
    }

    h1 {
      font-size: 2.5rem;
      font-weight: 700;
      color: #1a1a1a;
      line-height: 1.2;
      letter-spacing: -0.02em;
    }

    .subtitle {
      font-size: 1.1rem;
      color: #4a4a4a;
      margin-bottom: 1.5rem;
      font-weight: 400;
    }

    form {
      display: flex;
      gap: 0.75rem;
      width: 100%;
      background: #fff;
      padding: 0.5rem;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    input[type="search"] {
      flex-grow: 1;
      padding: 0.8rem 1rem;
      font-size: 1rem;
      border: none;
      border-radius: 8px;
      background: transparent;
      outline: none;
      color: #1a1a1a;
    }

    input[type="search"]::placeholder {
      color: #8a8a8a;
      font-style: italic;
    }

    input[type="submit"] {
      background: #007aff;
      border: none;
      border-radius: 8px;
      color: white;
      font-weight: 600;
      padding: 0 1.5rem;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.2s ease;
      font-size: 0.95rem;
    }

    input[type="submit"]:hover {
      background: #005bb5;
      transform: translateY(-1px);
    }

    .search-label {
      font-size: 0.9rem;
      font-weight: 500;
      color: #2a2a2a;
      margin-bottom: 0.5rem;
      display: block;
    }

    /* Widget container */
    .widget-container {
      flex: 1;
      max-width: 500px;
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
      background: #000;
      height: 600px;
      position: relative;
    }

    #tesseract {
      display: block;
      width: 100%;
      height: 100%;
    }

    /* Responsive design */
    @media (max-width: 768px) {
      main {
        flex-direction: column;
        gap: 2rem;
      }
      .widget-container {
        height: 400px;
        max-width: 100%;
      }
    }
  </style>
</head>
<body>
  <main>
    <section class="search-section" aria-label="Medical Research Search">
      <h1>Explore Medical Research</h1>
      <p class="subtitle">Dive into cutting-edge discoveries with trusted resources.</p>

      <!-- Doc'CISMeF -->
      <div>
        <label for="searchInput" class="search-label">Doc'CISMeF</label>
        <form id="searchForm" aria-label="Doc'CISMeF Search">
          <input
            type="search"
            name="q"
            id="searchInput"
            placeholder="Explore French medical literature"
            required
            autocomplete="off"
          />
          <input type="submit" value="Search" />
        </form>
      </div>

      <!-- Google Scholar -->
      <div>
        <label for="googleScholar" class="search-label">Google Scholar</label>
        <form action="https://scholar.google.com/scholar" method="get" aria-label="Google Scholar Search">
          <input
            type="search"
            id="googleScholar"
            name="q"
            placeholder="Stand on the shoulders of giants"
            autocomplete="off"
            required
          />
          <input type="submit" value="Search" />
        </form>
      </div>

      <!-- Perplexity AI -->
      <div>
        <label for="perplexitySearch" class="search-label">Perplexity AI</label>
        <form action="https://www.perplexity.ai/search" method="get" aria-label="Perplexity AI Search">
          <input
            type="search"
            id="perplexitySearch"
            name="q"
            placeholder="Augmented research insights"
            autocomplete="off"
            required
          />
          <input type="submit" value="Search" />
        </form>
      </div>
    </section>

    <aside class="widget-container" aria-label="Cosmic Tesseract Visualization">
      <canvas id="tesseract"></canvas>
    </aside>
  </main>

  <script>
    // Doc'CISMeF custom redirect
    document.getElementById('searchForm').addEventListener('submit', function (event) {
      event.preventDefault();
      const query = document.getElementById('searchInput').value.trim();
      if (query) {
        window.location.href = 'https://doccismef.chu-rouen.fr/dc/#q=' + encodeURIComponent(query);
      }
    });

    // Tesseract visualization
    const canvas = document.getElementById('tesseract');
    const ctx = canvas.getContext('2d');

    function resize() {
      canvas.width = canvas.clientWidth;
      canvas.height = canvas.clientHeight;
    }
    resize();

    const vertices = [
      [-1, -1, -1, -1], [1, -1, -1, -1], [1, 1, -1, -1], [-1, 1, -1, -1],
      [-1, -1, 1, -1], [1, -1, 1, -1], [1, 1, 1, -1], [-1, 1, 1, -1],
      [-1, -1, -1, 1], [1, -1, -1, 1], [1, 1, -1, 1], [-1, 1, -1, 1],
      [-1, -1, 1, 1], [1, -1, 1, 1], [1, 1, 1, 1], [-1, 1, 1, 1]
    ];

    const edges = [
      [0, 1], [1, 2], [2, 3], [3, 0], [4, 5], [5, 6], [6, 7], [7, 4],
      [0, 4], [1, 5], [2, 6], [3, 7], [8, 9], [9, 10], [10, 11], [11, 8],
      [12, 13], [13, 14], [14, 15], [15, 12], [8, 12], [9, 13], [10, 14],
      [11, 15], [0, 8], [1, 9], [2, 10], [3, 11], [4, 12], [5, 13], [6, 14], [7, 15]
    ];

    const stars = Array(100).fill().map(() => ({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      size: Math.random() * 1.5 + 0.5,
      speedX: (Math.random() - 0.5) * 0.3,
      speedY: (Math.random() - 0.5) * 0.3,
      twinkle: Math.random() * 0.8 + 0.8
    }));

    function drawStars() {
      stars.forEach(star => {
        ctx.fillStyle = `rgba(255, 255, 255, ${Math.abs(Math.sin(Date.now() * 0.001 * star.twinkle))})`;
        ctx.beginPath();
        ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
        ctx.fill();

        star.x += star.speedX;
        star.y += star.speedY;

        if (star.x < 0 || star.x > canvas.width || star.y < 0 || star.y > canvas.height) {
          star.x = Math.random() * canvas.width;
          star.y = Math.random() * canvas.height;
        }
      });
    }

    function rotate4D(vertices, angleX, angleY, angleZ, angleW) {
      const cosX = Math.cos(angleX), sinX = Math.sin(angleX);
      const cosY = Math.cos(angleY), sinY = Math.sin(angleY);
      const cosZ = Math.cos(angleZ), sinZ = Math.sin(angleZ);
      const cosW = Math.cos(angleW), sinW = Math.sin(angleW);

      return vertices.map(([x, y, z, w]) => {
        let nx = x * cosW - w * sinW;
        let nw = x * sinW + w * cosW;
        let ny = y * cosZ - z * sinZ;
        let nz = y * sinZ + z * cosZ;

        const rx = nx * cosY - nz * sinY;
        const rz = nx * sinY + nz * cosY;
        const ry = ny * cosX - nw * sinX;
        const rw = ny * sinX + nw * cosX;

        return [rx, ry, rz, rw];
      });
    }

    function projectTo3D([x, y, z, w]) {
      const distance = 4;
      const scale = distance / (distance - w);
      return [x * scale, y * scale, z * scale];
    }

    function projectTo2D([x, y, z]) {
      const scale = 60;
      const perspective = 4 / (4 - z);
      return [
        canvas.width / 2 + x * scale * perspective,
        canvas.height / 2 - y * scale * perspective
      ];
    }

    function drawCosmicGlow() {
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      const pulse = Math.sin(Date.now() * 0.001) * 5;

      const gradient = ctx.createRadialGradient(centerX, centerY, 50 + pulse, centerX, centerY, 120 + pulse);
      gradient.addColorStop(0, "rgba(150, 200, 255, 0.2)");
      gradient.addColorStop(1, "rgba(0, 0, 0, 0)");

      ctx.beginPath();
      ctx.arc(centerX, centerY, 120 + pulse, 0, Math.PI * 2);
      ctx.fillStyle = gradient;
      ctx.fill();
    }

    let angleX = 0, angleY = 0, angleZ = 0, angleW = 0;
    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      drawStars();
      drawCosmicGlow();

      const rotatedVertices = rotate4D(vertices, angleX, angleY, angleZ, angleW);
      const projectedVertices = rotatedVertices.map(projectTo3D).map(projectTo2D);

      edges.forEach(([start, end]) => {
        const [x1, y1] = projectedVertices[start];
        const [x2, y2] = projectedVertices[end];

        const glowOpacity = 0.7 + Math.sin(Date.now() * 0.002) * 0.2;
        const gradient = ctx.createLinearGradient(x1, y1, x2, y2);
        gradient.addColorStop(0, `rgba(100, 180, 255, ${glowOpacity})`);
        gradient.addColorStop(1, `rgba(50, 50, 150, ${glowOpacity * 0.7})`);

        ctx.strokeStyle = gradient;
        ctx.lineWidth = 1.5;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
      });

      angleX += 0.008;
      angleY += 0.006;
      angleZ += 0.004;
      angleW += 0.002;

      requestAnimationFrame(animate);
    }

    window.addEventListener('resize', () => {
      resize();
      stars.forEach(star => {
        star.x = Math.random() * canvas.width;
        star.y = Math.random() * canvas.height;
      });
    });

    animate();
  </script>