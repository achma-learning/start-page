<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Search Bar</title>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #004aad 0%, #cb6d51 100%); /* Moroccan blue to terracotta */
            position: relative;
            overflow: hidden;
        }
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><path fill="none" stroke="%23FFD700" stroke-width="2" d="M50 10 L90 50 L50 90 L10 50 Z M50 20 L80 50 L50 80 L20 50 Z"/></svg>') repeat;
            opacity: 0.1; /* Subtle Moroccan geometric pattern */
            z-index: 0;
        }
        .search-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); /* Apple-inspired shadow */
            z-index: 1;
            max-width: 400px;
        }
        .search-bar {
            display: flex;
            gap: 10px;
            width: 100%;
        }
        #searchInput {
            padding: 12px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 8px;
            width: 100%;
            box-sizing: border-box;
            background: #fff;
            transition: border-color 0.3s ease;
        }
        #searchInput:focus {
            outline: none;
            border-color: #FFD700; /* Moroccan gold */
        }
        button {
            padding: 12px 24px;
            font-size: 16px;
            border: none;
            background: #004aad; /* Moroccan blue */
            color: white;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.3s ease;
        }
        button:hover {
            background: #003087; /* Darker blue */
        }
        #wikiButton {
            background: #cb6d51; /* Terracotta */
        }
        #wikiButton:hover {
            background: #a55842; /* Darker terracotta */
        }
        #searchSource {
            font-size: 14px;
            color: #333;
            margin-top: 5px;
            text-align: center;
        }
        #wikiContent {
            display: none;
            margin-top: 10px;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background: #fff;
            max-width: 100%;
            font-size: 14px;
            color: #333;
        }
        #wikiContent ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        #wikiContent li {
            margin-bottom: 8px;
        }
        #wikiContent li strong {
            color: #004aad; /* Moroccan blue for prefixes */
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">
</head>
<body>
    <div class="search-container">
        <div class="search-bar">
            <form id="searchForm">
                <input type="text" id="searchInput" placeholder="Research means that you donâ€™t know, but are willing to find out" autocomplete="off">
                <button type="submit">Search</button>
            </form>
        </div>
        <button id="wikiButton">Wiki</button>
        <div id="searchSource">Enter a query to see the search source</div>
        <div id="wikiContent"></div>
    </div>

    <script>
        const searchInput = document.getElementById('searchInput');
        const searchForm = document.getElementById('searchForm');
        const searchSource = document.getElementById('searchSource');
        const wikiButton = document.getElementById('wikiButton');
        const wikiContent = document.getElementById('wikiContent');

        // Define search engines
        const searchEngines = {
            'g:': {
                name: 'Google',
                url: 'https://www.google.com/search?q='
            },
            'g+:': {
                name: 'Google Advanced',
                url: 'https://www.google.com/advanced_search?q='
            },
            'y:': {
                name: 'YouTube',
                url: 'https://www.youtube.com/results?search_query='
            },
            'gs:': {
                name: 'Google Scholar',
                url: 'https://scholar.google.com/scholar?q='
            },
            'cismef:': {
                name: 'CISMeF',
                url: 'https://doccismef.chu-rouen.fr/dc/#q='
            },
            'these-fr:': {
                name: 'Theses.fr',
                url: 'https://theses.fr/?q='
            },
            'these-ma:': {
                name: 'Toubkal',
                url: 'https://toubkal.imist.ma/?query='
            },
            'pubmed:': {
                name: 'PubMed',
                url: 'https://pubmed.ncbi.nlm.nih.gov/?term='
            },
            'rs:': {
                name: 'ResearchGate',
                url: 'https://www.researchgate.net/search/publication?q='
            }
            // Add more search engines here as needed
        };

        // Update search source display
        function updateSearchSource() {
            const query = searchInput.value.trim();
            let source = 'Unknown source';
            let matchedPrefix = '';

            for (const prefix in searchEngines) {
                if (query.startsWith(prefix)) {
                    source = searchEngines[prefix].name;
                    matchedPrefix = prefix;
                    break;
                }
            }

            searchSource.textContent = `Search source: ${source}`;
            return { prefix: matchedPrefix, query: query.slice(matchedPrefix.length) };
        }

        // Handle search
        function performSearch(e) {
            e.preventDefault();
            const { prefix, query } = updateSearchSource();
            
            if (query && prefix in searchEngines) {
                const searchUrl = searchEngines[prefix].url + encodeURIComponent(query);
                window.open(searchUrl, '_blank');
            } else if (query && !prefix) {
                // Default to Google if no prefix is provided
                const searchUrl = searchEngines['g:'].url + encodeURIComponent(query);
                window.open(searchUrl, '_blank');
            }
        }

        // Populate and toggle wiki content
        function toggleWiki() {
            if (wikiContent.style.display === 'block') {
                wikiContent.style.display = 'none';
            } else {
                let content = '<ul>';
                for (const prefix in searchEngines) {
                    content += `<li><strong>${prefix}</strong> - ${searchEngines[prefix].name}</li>`;
                }
                content += '</ul>';
                wikiContent.innerHTML = content;
                wikiContent.style.display = 'block';
            }
        }

        // Event listeners
        searchInput.addEventListener('input', updateSearchSource);
        searchForm.addEventListener('submit', performSearch);
        wikiButton.addEventListener('click', toggleWiki);
    </script>
</body>
</html>